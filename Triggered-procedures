--zad1

CREATE TABLE DziennikOperacji (

    DATA_OPERACJI DATE,

    TYP_OPERACJI VARCHAR2(6),

    NAZWA_TABELI VARCHAR(20),

    LICZBA_REKORDOW NUMBER

);

/

SELECT * FROM DziennikOperacji;

/

CREATE OR REPLACE TRIGGER LogujOperacje

    AFTER UPDATE OR INSERT OR DELETE ON ZESPOLY

DECLARE 

    vData DziennikOperacji.DATA_OPERACJI%TYPE;

    vTyp DziennikOperacji.TYP_OPERACJI%TYPE;

    vNazwa DziennikOperacji.NAZWA_TABELI%TYPE;

    vLiczba DziennikOperacji.LICZBA_REKORDOW%TYPE;

BEGIN

    vData := SYSDATE;

    vNazwa := 'ZESPOLY';

    SELECT COUNT(id_zesp) INTO vLiczba FROM ZESPOLY;

    CASE

        WHEN INSERTING THEN

            vTyp := 'INSERT';

        WHEN DELETING THEN

            vTYP := 'DELETE';

        WHEN UPDATING THEN

            vTYP := 'UPDATE';

    END CASE;



    INSERT INTO DZIENNIKOPERACJI(DATA_OPERACJI, TYP_OPERACJI, NAZWA_TABELI, LICZBA_REKORDOW)

    VALUES(vData, vTyp, vNazwa, vLiczba);

END;

/

BEGIN

    INSERT INTO ZESPOLY(id_zesp, nazwa, adres)

    VALUES(120, 'TEST', 'TEST');

END;

/

SELECT * FROM DZIENNIKOPERACJI;

/



--zad2

CREATE OR REPLACE TRIGGER PokazPlace

    BEFORE UPDATE OF placa_pod ON Pracownicy

    FOR EACH ROW

    WHEN (OLD.placa_pod <> NEW.placa_pod OR OLD.placa_pod IS NULL OR NEW.placa_pod IS NULL)

BEGIN

    DBMS_OUTPUT.PUT_LINE('Pracownik ' || :OLD.nazwisko);

    IF (:OLD.placa_pod IS NULL) THEN

        DBMS_OUTPUT.PUT_LINE('Płaca przed modyfikacją: NULL');

    ELSE 

        DBMS_OUTPUT.PUT_LINE('Płaca przed modyfikacją: ' || :OLD.placa_pod);

    END IF;

    

    IF (:NEW.placa_pod IS NULL) THEN

        DBMS_OUTPUT.PUT_LINE('Płaca po modyfikacji: NULL');

    ELSE     

        DBMS_OUTPUT.PUT_LINE('Płaca po modyfikacji: ' || :NEW.placa_pod);

    END IF;

END;

/

CREATE TRIGGER WymuszajPlace

    BEFORE INSERT OR UPDATE OF placa_pod ON Pracownicy

    FOR EACH ROW

    WHEN (NEW.etat IS NOT NULL)

DECLARE

    vPlacaMin Etaty.placa_min%TYPE;

    vPlacaMax Etaty.placa_max%TYPE;

BEGIN

    SELECT placa_min, placa_max

    INTO vPlacaMin, vPlacaMax

    FROM Etaty WHERE nazwa = :NEW.etat;

    IF :NEW.placa_pod NOT BETWEEN vPlacaMin AND vPlacaMax THEN

    RAISE_APPLICATION_ERROR(-20001, 'Płaca poza zakresem dla etatu!');

    END IF;

END;

/



--zad3

CREATE OR REPLACE TRIGGER UzupelnijPlace

    BEFORE INSERT ON Pracownicy

    FOR EACH ROW

    WHEN ((NEW.etat IS NOT NULL AND NEW.PLACA_POD IS NULL) OR NEW.PLACA_DOD IS NULL) 

DECLARE

    vPlacaMin Etaty.placa_min%TYPE;

BEGIN

    SELECT placa_min

    INTO vPlacaMin

    FROM Etaty WHERE nazwa = :NEW.etat;



    IF :NEW.etat IS NOT NULL AND :NEW.placa_pod IS NULL THEN

        :NEW.placa_pod := vPlacaMin;

    END IF;



    IF :NEW.placa_dod IS NULL THEN

        :NEW.placa_dod := 0;

    END IF;

END;

/

BEGIN

    DBMS_OUTPUT.PUT_LINE('');

END;

/



--zad4

SELECT MAX(ID_ZESP) FROM ZESPOLY;



CREATE SEQUENCE SEQ_Zespoly

START WITH 51

INCREMENT BY 1;



CREATE OR REPLACE TRIGGER UzupelnijID

    BEFORE INSERT ON ZESPOLY

    FOR EACH ROW

    WHEN (NEW.ID_ZESP IS NULL)

BEGIN

    :NEW.ID_ZESP := SEQ_Zespoly.nextval;

END;

/

INSERT INTO ZESPOLY(nazwa, adres) VALUES('NOWY', 'brak');



/

CREATE OR REPLACE VIEW StatystykiZespolow(id_zesp, nazwa, liczba_pracownikow) AS

SELECT id_zesp, nazwa, COUNT(id_prac)

FROM ZESPOLY LEFT JOIN PRACOWNICY USING(ID_ZESP)

GROUP BY id_zesp, nazwa

/

CREATE TRIGGER ZamiastInsert

    INSTEAD OF INSERT ON StatystykiZespolow

BEGIN

    INSERT INTO ZESPOLY(id_zesp, nazwa)

    VALUES(:NEW.id_zesp, :NEW.nazwa);

END;

/

INSERT INTO StatystykiZespolow(id_zesp, nazwa,liczba_pracownikow)

VALUES(99, 'NOWY ZESPÓŁ', 0);

/



--zad5

CREATE OR REPLACE VIEW Szefowie(szef, pracownicy) AS

SELECT s.nazwisko, COUNT(p.id_prac)

FROM PRACOWNICY s INNER JOIN PRACOWNICY p ON s.id_prac = p.id_szefa

GROUP BY s.nazwisko;

/

SELECT * FROM Szefowie;

/

CREATE OR REPLACE TRIGGER UsunSzefa

INSTEAD OF DELETE ON Szefowie

DECLARE

    vIdSzefa PRACOWNICY.ID_PRAC%TYPE;

    CURSOR cPodwladniSzefa(pIdSzefa PRACOWNICY.ID_PRAC%TYPE) IS

        SELECT id_prac FROM PRACOWNICY

        WHERE ID_SZEFA = pIdSzefa;

    vLiczbaPodwladnych NUMBER;

BEGIN

    SELECT ID_PRAC INTO vIdSzefa

    FROM PRACOWNICY WHERE NAZWISKO = :OLD.szef;



    FOR vPodwladny IN cPodwladniSzefa(vIdSzefa) LOOP

        SELECT COUNT(*) INTO vLiczbaPodwladnych

        FROM PRACOWNICY WHERE ID_SZEFA = vPodwladny.id_prac;



        IF vLiczbaPodwladnych > 0 THEN

            RAISE_APPLICATION_ERROR(-20001, 'Jeden z podwładnych usuwanego pracownika jest szefem innnych pracowników. Usuwanie anulowane!');

        ELSE

            DELETE FROM PRACOWNICY WHERE ID_PRAC = vPodwladny.id_prac;

        END IF;

    END LOOP;

    DELETE FROM PRACOWNICY WHERE NAZWISKO = :OLD.szef;

END;

/



SELECT * FROM szefowie;

DELETE FROM SZEFOWIE WHERE szef = 'MORZY';

ROLLBACK;



/

CREATE OR REPLACE TRIGGER PoUsunieciu

    AFTER DELETE ON PRACOWNICY

    FOR EACH ROW

DECLARE

    vLiczba PLS_INTEGER;

BEGIN

    SELECT COUNT(*) INTO vLiczba

    FROM PRACOWNICY;



    DBMS_OUTPUT.PUT_LINE('Pracowników po DELETE: ' || vLiczba);

END;

/

DELETE FROM PRACOWNICY WHERE nazwisko = 'HAPKE';



--zad6

ALTER TABLE ZESPOLY ADD LICZBA_PRACOWNIKOW NUMBER;

UPDATE ZESPOLY z

SET LICZBA_PRACOWNIKOW = (

        SELECT COUNT(p.id_prac) 

        FROM ZESPOLY zz LEFT JOIN PRACOWNICY p ON zz.id_zesp = p.id_zesp 

        WHERE zz.id_zesp = z.id_zesp

);

SELECT * FROM ZESPOLY;

/

CREATE OR REPLACE TRIGGER Pielegnuj

    AFTER INSERT OR DELETE OR UPDATE OF id_zesp ON PRACOWNICY

    FOR EACH ROW

BEGIN

    CASE

        WHEN DELETING THEN

            UPDATE ZESPOLY

            SET LICZBA_PRACOWNIKOW = LICZBA_PRACOWNIKOW - 1

            WHERE id_zesp = :OLD.id_zesp;

        

        WHEN UPDATING THEN

            UPDATE ZESPOLY

            SET LICZBA_PRACOWNIKOW = LICZBA_PRACOWNIKOW - 1

            WHERE id_zesp = :OLD.id_zesp;



            UPDATE ZESPOLY

            SET LICZBA_PRACOWNIKOW = LICZBA_PRACOWNIKOW + 1

            WHERE id_zesp = :NEW.id_zesp;

        

        WHEN INSERTING THEN

            UPDATE ZESPOLY

            SET LICZBA_PRACOWNIKOW = LICZBA_PRACOWNIKOW + 1

            WHERE id_zesp = :NEW.id_zesp;

    END CASE;

END;

/

INSERT INTO PRACOWNICY(id_prac, nazwisko, id_zesp, id_szefa)

VALUES(300, 'NOWY PRACOWNIK', 40, 120);

/



--zad7

ALTER TABLE PRACOWNICY DROP CONSTRAINT FK_ID_SZEFA;

ALTER TABLE PRACOWNICY ADD CONSTRAINT FK_ID_SZEFA FOREIGN KEY (id_szefa) REFERENCES pracownicy(id_prac) ON DELETE CASCADE;



CREATE OR REPLACE TRIGGER Usun_Prac

    AFTER DELETE ON PRACOWNICY

    FOR EACH ROW

    BEGIN

        DBMS_OUTPUT.PUT_LINE(:OLD.nazwisko);

    END;

/

DELETE FROM PRACOWNICY WHERE NAZWISKO = 'MORZY';

/

CREATE OR REPLACE TRIGGER Usun_Prac

    BEFORE DELETE ON PRACOWNICY

    FOR EACH ROW

    BEGIN

        DBMS_OUTPUT.PUT_LINE(:OLD.nazwisko);

    END;

-- wyzwalacz z AFTER najpierw wypisze nazwiska podwladnych a poniej szefa a BEFORE na odwrót





--zad8

ALTER TABLE PRACOWNICY DISABLE ALL TRIGGERS;



SELECT trigger_name, status, table_name

FROM User_Triggers;



--zad9

SELECT trigger_name, status, table_name

FROM User_Triggers

WHERE table_name IN ('PRACOWNICY', 'ZESPOLY') 

ORDER BY table_name, trigger_name;

/

DECLARE

    vDDL VARCHAR(60);

    CURSOR cTriggers IS

        SELECT TRIGGER_NAME FROM USER_TRIGGERS

        WHERE TABLE_NAME IN ('PRACOWNICY', 'ZESPOLY');

BEGIN

    FOR vTrigger IN cTriggers LOOP

        vDDL := 'DROP TRIGGER ' || vTrigger.trigger_name;

        EXECUTE IMMEDIATE (vDDL);

    END LOOP;

END;
